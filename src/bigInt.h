#ifndef BIG_INT_H
#define BIG_INT_H
////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <stdlib.h>

////////////////////////////////////////////////////////////
/// This function uses case-insensitive comparisons.
///
////////////////////////////////////////////////////////////
enum
{
	PLUS = 1,
	MINUS = -1
};

////////////////////////////////////////////////////////////
/// \brief Class representing a large number
///
////////////////////////////////////////////////////////////
typedef struct _BigInt
{
	int sign;
	int *arr;
	int len;
} BigInt;
////////////////////////////////////////////////////////////
/// \class BigInt
///
/// Detailed description, possibly with code snippets
/// explaining usage
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// \brief Constructor for BigInt
///
///	\return Pointer to new BigInt with positive sign
///  		and value of BigInt equal to 0
///
////////////////////////////////////////////////////////////
BigInt *bigInt_constructor();

////////////////////////////////////////////////////////////
/// \brief Int constructor for BigInt
///
/// \param value -- int value of BigInt
///
///	\return Pointer to new BigInt
///
////////////////////////////////////////////////////////////
BigInt *bigInt_constructori(const int value);

////////////////////////////////////////////////////////////
/// \brief Long long constructor for BigInt
///
/// \param value -- long long value of BigInt
///
///	\return Pointer to new BigInt
///
////////////////////////////////////////////////////////////
BigInt *bigInt_constructorll(const long long value);

////////////////////////////////////////////////////////////
/// \brief Char* constructor for BigInt
///
/// \param value -- char* value of BigInt
///
///	\return Pointer to new BigInt
///
////////////////////////////////////////////////////////////
BigInt *bigInt_constructorstr(const char *value);

////////////////////////////////////////////////////////////
/// \brief Frees memory from BigInt big_int
///
////////////////////////////////////////////////////////////
void bigInt_free(BigInt *big_int);

////////////////////////////////////////////////////////////
/// \brief make copy of big_int
///
///	\return pointer to copy of big_int
///
////////////////////////////////////////////////////////////
BigInt *bigInt_copy(const BigInt *big_int);

////////////////////////////////////////////////////////////
/// \brief Assign big_int value to big_int
///
////////////////////////////////////////////////////////////
void bigInt_assign(BigInt *big_int, const BigInt *value);

////////////////////////////////////////////////////////////
/// \brief Assign int value to big_int
///
////////////////////////////////////////////////////////////
void bigInt_assigni(BigInt *big_int,const int value);

////////////////////////////////////////////////////////////
/// \brief Assign long long value to big_int
///
////////////////////////////////////////////////////////////
void bigInt_assignll(BigInt *big_int,const long long value);

////////////////////////////////////////////////////////////
/// \brief Assign char* value to big_int
///
////////////////////////////////////////////////////////////
void bigInt_assignstr(BigInt *big_int, const char *value);

////////////////////////////////////////////////////////////
/// \brief Convert big_int to string
///
////////////////////////////////////////////////////////////
char *bigInt_tostring(const BigInt *big_int);

////////////////////////////////////////////////////////////
/// \brief Print big_int
///
////////////////////////////////////////////////////////////
void bigInt_print(const BigInt *big_int);

////////////////////////////////////////////////////////////
/// \brief Print big_int and make newline
///
////////////////////////////////////////////////////////////
void bigInt_println(const BigInt *big_int);

////////////////////////////////////////////////////////////
/// \brief return big_int plus int value
///
////////////////////////////////////////////////////////////
BigInt *bigInt_addi(const BigInt *big_int,const int value);

#endif // BIG_INT_H