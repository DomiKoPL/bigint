#ifndef BIG_INT_H
#define BIG_INT_H
////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <stdlib.h>
#include <stdbool.h>

////////////////////////////////////////////////////////////
/// This function uses case-insensitive comparisons.
///
////////////////////////////////////////////////////////////
enum
{
	PLUS = 1,
	MINUS = -1
};

enum
{
	SMALLER = -1,
	EQUAL = 0,
	BIGGER = 1
};

////////////////////////////////////////////////////////////
/// \brief Class representing a large number
///
////////////////////////////////////////////////////////////
typedef struct _Bigint
{
	int sign;
	int *arr;
	int len;
} Bigint;
////////////////////////////////////////////////////////////
/// \class Bigint
///
/// Detailed description, possibly with code snippets
/// explaining usage
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// \brief Constructor for Bigint
///
///	\return Pointer to new Bigint with positive sign
///  		and value of Bigint equal to 0
///
////////////////////////////////////////////////////////////
Bigint *bigint_constructor();

////////////////////////////////////////////////////////////
/// \brief Int constructor for Bigint
///
/// \param value -- int value of Bigint
///
///	\return Pointer to new Bigint
///
////////////////////////////////////////////////////////////
Bigint *bigint_constructori(const int value);

////////////////////////////////////////////////////////////
/// \brief Long long constructor for Bigint
///
/// \param value -- long long value of Bigint
///
///	\return Pointer to new Bigint
///
////////////////////////////////////////////////////////////
Bigint *bigint_constructorll(const long long value);

////////////////////////////////////////////////////////////
/// \brief Char* constructor for Bigint
///
/// \param value -- char* value of Bigint
///
///	\return Pointer to new Bigint
///
////////////////////////////////////////////////////////////
Bigint *bigint_constructorstr(const char *value);

////////////////////////////////////////////////////////////
/// \brief Frees memory from Bigint big_int
///
////////////////////////////////////////////////////////////
void bigint_free(Bigint *big_int);

////////////////////////////////////////////////////////////
/// \brief make copy of big_int
///
///	\return pointer to copy of big_int
///
////////////////////////////////////////////////////////////
Bigint *bigint_copy(const Bigint *big_int);

////////////////////////////////////////////////////////////
/// \brief Assign big_int value to big_int
///
////////////////////////////////////////////////////////////
void bigint_assign(Bigint *big_int, const Bigint *value);

////////////////////////////////////////////////////////////
/// \brief Assign int value to big_int
///
////////////////////////////////////////////////////////////
void bigint_assigni(Bigint *big_int, const int value);

////////////////////////////////////////////////////////////
/// \brief Assign long long value to big_int
///
////////////////////////////////////////////////////////////
void bigint_assignll(Bigint *big_int, const long long value);

////////////////////////////////////////////////////////////
/// \brief Assign char* value to big_int
///
////////////////////////////////////////////////////////////
void bigint_assignstr(Bigint *big_int, const char *value);

////////////////////////////////////////////////////////////
/// \brief Convert big_int to string
///
////////////////////////////////////////////////////////////
char *bigint_tostring(const Bigint *big_int);

////////////////////////////////////////////////////////////
/// \brief Print big_int
///
////////////////////////////////////////////////////////////
void bigint_print(const Bigint *big_int);

////////////////////////////////////////////////////////////
/// \brief Print big_int and make newline
///
////////////////////////////////////////////////////////////
void bigint_println(const Bigint *big_int);

////////////////////////////////////////////////////////////
/// \brief erase leading zeros
///
////////////////////////////////////////////////////////////
void bigint_trim(Bigint *big_int);

////////////////////////////////////////////////////////////
/// \brief abs(big_int)
///
/// \return ablosulte value of big_int
////////////////////////////////////////////////////////////
Bigint *bigint_abs(const Bigint *big_int);

////////////////////////////////////////////////////////////
/// \brief -big_int
///
////////////////////////////////////////////////////////////
Bigint *bigint_minus(const Bigint *big_int);

////////////////////////////////////////////////////////////
/// \brief
///
/// \return 1 if big_int is equal to 0, 0 otherwise
////////////////////////////////////////////////////////////
bool *bigint_is_zero(const Bigint *big_int);

////////////////////////////////////////////////////////////
/// \brief compare two Bigints A and B
///
/// \return SMALLER if A < B, EQUAL if A == B, 1 if A > B
////////////////////////////////////////////////////////////
short bigint_compare(const Bigint *A, const Bigint *B);

////////////////////////////////////////////////////////////
/// \brief compare Bigint A and int B
///
/// \return SMALLER if A < B, EQUAL if A == B, BIGGER if A > B
////////////////////////////////////////////////////////////
short bigint_comparei(const Bigint *A, const int B);

////////////////////////////////////////////////////////////
/// \brief compare Bigint A and long long B
///
/// \return SMALLER if A < B, EQUAL if A == B, BIGGER if A > B
////////////////////////////////////////////////////////////
short bigint_comparell(const Bigint *A, const long long B);

////////////////////////////////////////////////////////////
/// \brief compare Bigint A and string B
///
/// \return SMALLER if A < B, EQUAL if A == B, BIGGER if A > B
////////////////////////////////////////////////////////////
short bigint_comparestr(const Bigint *A, const char *B);

////////////////////////////////////////////////////////////
/// \brief return big_int plus value
///
////////////////////////////////////////////////////////////
Bigint *bigint_add(const Bigint *big_int, const Bigint *value);

////////////////////////////////////////////////////////////
/// \brief return big_int plus int value
///
////////////////////////////////////////////////////////////
Bigint *bigint_addi(const Bigint *big_int, const int value);

////////////////////////////////////////////////////////////
/// \brief return big_int plus long long value
///
////////////////////////////////////////////////////////////
Bigint *bigint_addll(const Bigint *big_int, const long long value);

////////////////////////////////////////////////////////////
/// \brief return big_int plus string value
///
////////////////////////////////////////////////////////////
Bigint *bigint_addstr(const Bigint *big_int, const char *value);

////////////////////////////////////////////////////////////
/// \brief return big_int subtract value
///
////////////////////////////////////////////////////////////
Bigint *bigint_sub(const Bigint *big_int, const Bigint *value);

////////////////////////////////////////////////////////////
/// \brief return big_int subtract int value
///
////////////////////////////////////////////////////////////
Bigint *bigint_subi(const Bigint *big_int, const int value);

////////////////////////////////////////////////////////////
/// \brief return big_int subtract long long value
///
////////////////////////////////////////////////////////////
Bigint *bigint_subll(const Bigint *big_int, const long long value);

////////////////////////////////////////////////////////////
/// \brief return big_int subtract string value
///
////////////////////////////////////////////////////////////
Bigint *bigint_substr(const Bigint *big_int, const char *value);

////////////////////////////////////////////////////////////
/// \brief return a * b in time O(a.len * b.len)
///
////////////////////////////////////////////////////////////
Bigint *bigint_mult(const Bigint *a, const Bigint *b);

#endif // BIG_INT_H